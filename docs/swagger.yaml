definitions:
  api.ContributionCommunityResponse:
    properties:
      amountFillings:
        type: integer
      amountUser:
        type: integer
      amountWater:
        type: integer
      savedMoney:
        type: number
      savedTrash:
        type: number
    type: object
  api.ContributionKLResponse:
    properties:
      amountRefillStationManual:
        type: integer
      amountRefillStationSmart:
        type: integer
    type: object
  api.ContributionUserResponse:
    properties:
      amountFillings:
        type: integer
      amountWater:
        type: integer
      savedMoney:
        type: number
      savedTrash:
        type: number
    type: object
  api.StationLikeCounter:
    properties:
      like_counter:
        type: integer
      station_id:
        type: integer
    type: object
  api.StationReviewAverage:
    properties:
      accesibility:
        type: number
      cleanness:
        type: number
      waterQuality:
        type: number
    type: object
  database.Bottle:
    properties:
      active:
        type: boolean
      bottle_image:
        type: string
      fill_volume:
        type: integer
      id:
        type: integer
      nfcid:
        type: string
      title:
        type: string
      user_id:
        type: integer
      water_type:
        type: string
    type: object
  database.Like:
    properties:
      id:
        type: integer
      station_id:
        type: integer
      user_id:
        type: integer
    type: object
  database.NullBool:
    properties:
      bool:
        type: boolean
      valid:
        type: boolean
    type: object
  database.RefillStation:
    properties:
      active:
        $ref: '#/definitions/database.NullBool'
      address:
        type: string
      description:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      offered_water_types:
        type: string
      opening_times:
        type: string
      refill_station_image:
        type: string
      type:
        type: string
      water_source:
        type: string
    type: object
  database.RefillStationProblem:
    properties:
      description:
        type: string
      id:
        type: integer
      refill_station_problem_image:
        type: string
      station_id:
        type: integer
      status:
        type: string
      timestamp:
        type: string
      title:
        type: string
    type: object
  database.RefillStationReview:
    properties:
      accessibility:
        type: integer
      cleanness:
        type: integer
      id:
        type: integer
      station_id:
        type: integer
      timestamp:
        type: string
      user_id:
        type: integer
      water_quality:
        type: integer
    type: object
  database.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  database.WaterTransaction:
    properties:
      bottle_id:
        type: integer
      guest:
        type: boolean
      id:
        type: integer
      station_id:
        type: integer
      timestamp:
        type: string
      user_id:
        type: integer
      volume:
        type: integer
      water_type:
        type: string
    type: object
host: poseidon-backend.fly.dev
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a water station.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /bottles:
    get:
      consumes:
      - application/json
      description: Get all bottles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Bottle'
            type: array
      summary: Show all bottles
      tags:
      - Bottles
    post:
      consumes:
      - application/json
      description: Create a new bottle
      parameters:
      - description: Bottle
        in: body
        name: bottle
        required: true
        schema:
          $ref: '#/definitions/database.Bottle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Bottle'
      summary: Create a bottle
      tags:
      - Bottles
    put:
      consumes:
      - application/json
      description: Update an existing bottle
      parameters:
      - description: Bottle
        in: body
        name: bottle
        required: true
        schema:
          $ref: '#/definitions/database.Bottle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Bottle'
      summary: Update a bottle
      tags:
      - Bottles
  /bottles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing bottle
      parameters:
      - description: Bottle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a bottle
      tags:
      - Bottles
    get:
      consumes:
      - application/json
      description: Get one bottle with the given ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Bottle'
      summary: Get bottle by bottle ID
      tags:
      - Bottles
  /bottles/preferences/{nfcId}:
    get:
      consumes:
      - application/json
      description: Get bottle preferences by the NFC ID
      parameters:
      - description: NFC ID
        in: path
        name: nfc_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Bottle'
      summary: Get bottle preferences by the NFC ID
      tags:
      - Bottles
  /bottles/users/{userId}:
    get:
      consumes:
      - application/json
      description: Get all bottles associated with a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Bottle'
            type: array
      summary: Get all bottles by user ID
      tags:
      - Bottles
  /contribution/community:
    get:
      consumes:
      - application/json
      description: Get the total water amount and savings for the community
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ContributionCommunityResponse'
      summary: Get community contribution
      tags:
      - Contribution
  /contribution/kl:
    get:
      consumes:
      - application/json
      description: Get the number of smart and manual refill stations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ContributionKLResponse'
      summary: Get contribution by station type
      tags:
      - Contribution
  /contribution/user/{id}:
    get:
      consumes:
      - application/json
      description: Get the total water amount and savings for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ContributionUserResponse'
      summary: Get user contribution
      tags:
      - Contribution
  /likes:
    delete:
      consumes:
      - application/json
      description: Delete an existing like
      parameters:
      - description: Like
        in: body
        name: like
        required: true
        schema:
          $ref: '#/definitions/database.Like'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a like
      tags:
      - Likes
    get:
      consumes:
      - application/json
      description: Get all likes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Like'
            type: array
      summary: Show all likes
      tags:
      - Likes
    post:
      consumes:
      - application/json
      description: Create a new like
      parameters:
      - description: Like
        in: body
        name: like
        required: true
        schema:
          $ref: '#/definitions/database.Like'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Like'
      summary: Create a like
      tags:
      - Likes
    put:
      consumes:
      - application/json
      description: Update an existing like
      parameters:
      - description: Like
        in: body
        name: like
        required: true
        schema:
          $ref: '#/definitions/database.Like'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Like'
      summary: Update a like
      tags:
      - Likes
  /likes/{refillstationId}/{usedId}:
    get:
      consumes:
      - application/json
      description: Check if a specific user likes a specific refill station
      parameters:
      - description: Refill Station ID
        in: path
        name: refillstationId
        required: true
        type: integer
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Check if a user likes a refill station
      tags:
      - Likes
  /likes/{refillstationId}/count:
    get:
      consumes:
      - application/json
      description: Get counter like for station
      parameters:
      - description: Refill Station ID
        in: path
        name: refillstationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.StationLikeCounter'
      summary: Return a like counter fo a given station id
      tags:
      - Likes
  /refill_station_problems:
    delete:
      consumes:
      - application/json
      description: Delete an existing refill station problem
      parameters:
      - description: Refill Station Problem ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a refill station problem
      tags:
      - refill_station_problems
    get:
      consumes:
      - application/json
      description: Get all refill station problems
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.RefillStationProblem'
            type: array
      summary: Show all refill station problems
      tags:
      - refill_station_problems
    post:
      consumes:
      - application/json
      description: Create a new refill station problem
      parameters:
      - description: Refill Station Problem
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/database.RefillStationProblem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.RefillStationProblem'
      summary: Create a refill station problem
      tags:
      - refill_station_problems
    put:
      consumes:
      - application/json
      description: Update an existing refill station problem
      parameters:
      - description: Refill Station Problem
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/database.RefillStationProblem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RefillStationProblem'
      summary: Update a refill station problem
      tags:
      - refill_station_problems
  /refill_station_reviews:
    delete:
      consumes:
      - application/json
      description: Delete an existing refill station review
      parameters:
      - description: Refill Station Review ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a refill station review
      tags:
      - refill_station_reviews
    get:
      consumes:
      - application/json
      description: Get all refill station reviews
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.RefillStationReview'
            type: array
      summary: Show all refill station reviews
      tags:
      - refill_station_reviews
    post:
      consumes:
      - application/json
      description: Create a new refill station review
      parameters:
      - description: Refill Station Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/database.RefillStationReview'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.RefillStationReview'
      summary: Create a refill station review
      tags:
      - refill_station_reviews
    put:
      consumes:
      - application/json
      description: Update an existing refill station review
      parameters:
      - description: Refill Station Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/database.RefillStationReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RefillStationReview'
      summary: Update a refill station review
      tags:
      - refill_station_reviews
  /refill_station_reviews/{userId}/{stationId}:
    get:
      consumes:
      - application/json
      description: Get all refill station reviews by user ID and station ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Station ID
        in: path
        name: stationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.RefillStationReview'
            type: array
      summary: Show all refill station reviews by user ID and station ID
      tags:
      - refill_station_reviews
  /refill_stations:
    get:
      consumes:
      - application/json
      description: Get all refill stations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.RefillStation'
            type: array
      summary: Show all refill stations
      tags:
      - Refill Stations
    post:
      consumes:
      - application/json
      description: Create a new refill station
      parameters:
      - description: Refill Station
        in: body
        name: station
        required: true
        schema:
          $ref: '#/definitions/database.RefillStation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.RefillStation'
      summary: Create a refill station
      tags:
      - Refill Stations
    put:
      consumes:
      - application/json
      description: Update an existing refill station
      parameters:
      - description: Refill Station
        in: body
        name: station
        required: true
        schema:
          $ref: '#/definitions/database.RefillStation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RefillStation'
      summary: Update a refill station
      tags:
      - Refill Stations
  /refill_stations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing refill station
      parameters:
      - description: Refill Station ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a refill station
      tags:
      - Refill Stations
    get:
      consumes:
      - application/json
      description: Get a refill station by its ID
      parameters:
      - description: Refill Station ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RefillStation'
      summary: Get a refill station by ID
      tags:
      - Refill Stations
  /refill_stations/{id}/reviews:
    get:
      consumes:
      - application/json
      description: Get the average review score for a refill station by its ID
      parameters:
      - description: Refill Station ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.StationReviewAverage'
      summary: Get the average review score for a refill station
      tags:
      - Refill Stations
  /refill_stations/markers:
    get:
      consumes:
      - application/json
      description: Get all refill station markers with specific attributes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      summary: Get all refill station markers
      tags:
      - Refill Stations
  /users:
    delete:
      consumes:
      - application/json
      description: Delete an existing user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.User'
            type: array
      summary: Show all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
      summary: Create a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
      summary: Update a user
      tags:
      - users
  /water_transactions:
    delete:
      consumes:
      - application/json
      description: Delete an existing water transaction
      parameters:
      - description: Water Transaction ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a water transaction
      tags:
      - water_transactions
    get:
      consumes:
      - application/json
      description: Get all water transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.WaterTransaction'
            type: array
      summary: Show all water transactions
      tags:
      - water_transactions
    post:
      consumes:
      - application/json
      description: Create a new water transaction
      parameters:
      - description: Water Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/database.WaterTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.WaterTransaction'
      summary: Create a water transaction
      tags:
      - water_transactions
    put:
      consumes:
      - application/json
      description: Update an existing water transaction
      parameters:
      - description: Water Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/database.WaterTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.WaterTransaction'
      summary: Update a water transaction
      tags:
      - water_transactions
swagger: "2.0"
